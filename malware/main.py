import os
import shutil
import subprocess
import psutil
import logging
import time
import threading
import platform
import venv
import tkinter as tk
from PIL import Image, ImageTk
from tkinter import filedialog, messagebox, scrolledtext
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Ransomware signatures
ransomware_signatures = [
    b'\x57\x41\x4E\x41\x43\x52\x59',  # "WANACRY"
    b'\x43\x52\x59\x50\x54\x4F\x4C\x4F\x43\x4B\x4E\x45\x52',  # "CRYPTOLOCKER"
    b'\x54\x45\x53\x4C\x41\x43\x52\x59\x50\x54',  # "TESLACRYPT"
    b'\x4C\x4F\x43\x4B\x59',  # "LOCKY"
    b'\x43\x45\x52\x42\x45\x52',  # "CERBER"
    b'\x50\x45\x54\x59\x41',  # "PETYA"
    b'\x4E\x4F\x54\x50\x45\x54\x59\x41',  # "NOTPETYA"
    b'\x52\x59\x55\x4B',  # "RYUK"
    b'\x47\x41\x4E\x44\x43\x52\x41\x42',  # "GANDCRAB"
    b'\x4D\x41\x5A\x45',  # "MAZE"
    b'\x53\x4F\x44\x49\x4E\x4F\x4B\x49\x42\x49',  # "SODINOKIBI"
    b'\x45\x47\x52\x45\x47\x4F\x52',  # "EGREGOR"
    b'\x44\x48\x41\x52\x4D\x41',  # "DHARMA"
    b'\x41\x56\x41\x44\x44\x4F\x4E',  # "AVADDON"
    b'\x42\x4C\x41\x43\x4B\x4D\x41\x54\x54\x45\x52',  # "BLACKMATTER"
    b'\x43\x4F\x4E\x54\x49',  # "CONTI"
    b'\x43\x4C\x4F\x50',  # "CLOP"
    b'\x50\x48\x4F\x45\x4E\x49\x58',  # "PHOENIX"
    b'\x50\x59\x53\x41',  # "PYSA"
    b'\x4D\x4F\x55\x4E\x54\x4C\x4F\x43\x4B\x45\x52',  # "MOUNTLOCKER"
]

def scan_file_for_signatures(file_path, signatures):
    try:
        with open(file_path, 'rb') as file:
            file_content = file.read()
            for signature in signatures:
                if signature in file_content:
                    return True
        return False
    except Exception as e:
        output_text.insert(tk.END, f"Error reading file {file_path}: {e}\n")
        return False

def scan_directory(directory, signatures):
    ransomware_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            if scan_file_for_signatures(file_path, signatures):
                ransomware_files.append(file_path)
    return ransomware_files

def move_file(source_file, destination_directory):
    filename = os.path.basename(source_file)
    shutil.move(source_file, os.path.join(destination_directory, filename))
    output_text.insert(tk.END, f"\nFile '{filename}' moved to {destination_directory}\n")

def transfer_files(source_directory, destination_directory):
    ransomware_files = scan_directory(source_directory, ransomware_signatures)
    if ransomware_files:
        output_text.insert(tk.END, "\nRansomware detected. The following files will not be moved:\n")
        for ransomware_file in ransomware_files:
            output_text.insert(tk.END, f"{ransomware_file}\n")
    
    output_text.insert(tk.END, "\nTransferred files ....\n")
    for filename in os.listdir(source_directory):
        source_file = os.path.join(source_directory, filename)
        if source_file not in ransomware_files:  # Only move files not detected as ransomware
            move_file(source_file, destination_directory)

# System resource monitoring
if platform.system() == 'Windows':
    from win10toast import ToastNotifier
    toaster = ToastNotifier()
else:
    import notify2
    notify2.init("Resource Monitor")

logging.basicConfig(filename='system_monitor.log', level=logging.DEBUG, format='%(asctime)s - %(message)s')

def check_system_resources(CPU_THRESHOLD, MEMORY_THRESHOLD):
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            logging.debug(f"Checking process {proc.info['name']} (PID: {proc.info['pid']})")
            if proc.info['cpu_percent'] > CPU_THRESHOLD or proc.info['memory_percent'] > MEMORY_THRESHOLD:
                alert_message = (f"High resource usage detected: "
                                 f"CPU: {proc.info['cpu_percent']}%, "
                                 f"Memory: {proc.info['memory_percent']}%")
                output_text.insert(tk.END, f"{alert_message}\n")
                logging.info(alert_message)
                display_notification(alert_message)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

def monitor_resources(CPU_THRESHOLD, MEMORY_THRESHOLD, INTERVAL):
    global running
    output_text.insert(tk.END, "Starting system resource monitoring...\n")
    while running:
        check_system_resources(CPU_THRESHOLD, MEMORY_THRESHOLD)
        time.sleep(INTERVAL)

def stop_monitoring():
    global running
    running = False

def display_notification(message):
    if platform.system() == 'Windows':
        toaster.show_toast("Resource Monitor", message, duration=5)
    else:
        notification = notify2.Notification("Resource Monitor", message)
        notification.show()

# Directory monitoring
stop_directory_monitoring_event = threading.Event()

class NewFileHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            output_text.insert(tk.END, f"New file detected: {event.src_path}\n")
            process_new_file(event.src_path)

def scan_file(file_path):
    try:
        with open(file_path, 'r') as file:
            contents = file.read()
            if "ransomware_signature" in contents:
                return False
            else:
                return True
    except Exception as e:
        output_text.insert(tk.END, f"Error scanning file: {e}\n")
        return False

def process_new_file(file_path):
    if scan_file(file_path):
        output_text.insert(tk.END, f"File {file_path} is safe.\n")
        # Move the file to its intended location or take other action
    else:
        output_text.insert(tk.END, f"File {file_path} is potentially dangerous!\n")
        # Alert the user and take appropriate action

def monitor_directory(path='.'):
    event_handler = NewFileHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=False)
    observer.start()
    try:
        while not stop_directory_monitoring_event.is_set():
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# Running external scripts
def run_PE(app_instance):
    file_path = app_instance.exe_entry.get()
    if file_path:
        try:
            result = subprocess.run(
                ["python3", "/home/kali/Downloads/malware/Extract/PE_main.py", file_path],
                capture_output=True, text=True
            )
            output_text.insert(tk.END, f"\nScan result for {file_path}:\n{result.stdout}\n{result.stderr}\n")
        except Exception as e:
            output_text.insert(tk.END, f"Error running PE scan: {e}\n")
    else:
        messagebox.showwarning("Input Error", "Please enter the path to the .exe file.")

# Virtual environment creation
def create_virtual_env():
    env_dir = 'ranvenv'
    download_dir = os.path.join(env_dir, 'downloads')

    # Create the virtual environment
    venv.create(env_dir, with_pip=True)

    # Create the 'downloads' directory inside the virtual environment
    os.makedirs(download_dir, exist_ok=True)

    # Determine the activation command based on the OS
    if os.name == 'nt':  # For Windows
        activate_script = os.path.join(env_dir, 'Scripts', 'activate.bat')
        activation_command = activate_script
    else:  # For macOS and Linux
        activate_script = os.path.join(env_dir, 'bin', 'activate')
        activation_command = f"source {activate_script}"
    
    # Display the activation command in the output
    output_text.insert(tk.END, f"Virtual environment created. To activate, run: {activation_command}\n")

    return download_dir  # Return the path to the 'downloads' directory
    

#GUI mode
class RansomwareToolApp:
    def __init__(self, master):
        self.master = master
        master.title("Ransomware Assessment Tool")

        try:
            self.icon_image = Image.open("app.png")  # Use your PNG file here
            self.icon_photo = ImageTk.PhotoImage(self.icon_image)
            master.iconphoto(True, self.icon_photo)
        except Exception as e:
            print(f"Error loading icon: {e}")

        # Adding a border to the frame
        self.border_frame = tk.Frame(master, bd=2, relief=tk.SUNKEN)
        self.border_frame.grid(row=0, column=0, padx=10, pady=10)

        # Additional widgets and layout code go here


        # Source directory label and entry
        self.source_label = tk.Label(self.border_frame, text="Source Directory:")
        self.source_label.grid(row=0, column=0, sticky=tk.W)
        self.source_entry = tk.Entry(self.border_frame, width=50)
        self.source_entry.grid(row=0, column=1)

        # Browse source directory button
        self.browse_source_button = tk.Button(self.border_frame, text="Browse", command=self.browse_source)
        self.browse_source_button.grid(row=0, column=2)

        # Destination directory label and entry
        self.destination_label = tk.Label(self.border_frame, text="Destination Directory:")
        self.destination_label.grid(row=1, column=0, sticky=tk.W)
        self.destination_entry = tk.Entry(self.border_frame, width=50)
        self.destination_entry.grid(row=1, column=1)

        # Browse destination directory button
        self.browse_destination_button = tk.Button(self.border_frame, text="Browse", command=self.browse_destination)
        self.browse_destination_button.grid(row=1, column=2)

        # Transfer files button
        self.transfer_button = tk.Button(self.border_frame, text="Transfer Files", command=self.transfer_files)
        self.transfer_button.grid(row=2, column=0, columnspan=3, pady=10)

        # .exe file label and entry
        self.exe_label = tk.Label(self.border_frame, text="Path to .exe for PE scan:")
        self.exe_label.grid(row=3, column=0, sticky=tk.W)
        self.exe_entry = tk.Entry(self.border_frame, width=50)
        self.exe_entry.grid(row=3, column=1)

        # Browse .exe file button
        self.browse_exe_button = tk.Button(self.border_frame, text="Browse", command=self.browse_exe)
        self.browse_exe_button.grid(row=3, column=2)

        # Run PE scan button
        self.run_PE_button = tk.Button(self.border_frame, text="Run PE Scan", command=lambda: run_PE(self))
        self.run_PE_button.grid(row=4, column=0, columnspan=3, pady=10)

        # CPU threshold label and entry
        self.cpu_label = tk.Label(self.border_frame, text="CPU Usage Threshold (%):")
        self.cpu_label.grid(row=5, column=0, sticky=tk.W)
        self.cpu_entry = tk.Entry(self.border_frame, width=10)
        self.cpu_entry.grid(row=5, column=1, sticky=tk.W)
        self.cpu_entry.insert(tk.END, '30')

        # Memory threshold label and entry
        self.memory_label = tk.Label(self.border_frame, text="Memory Usage Threshold (%):")
        self.memory_label.grid(row=6, column=0, sticky=tk.W)
        self.memory_entry = tk.Entry(self.border_frame, width=10)
        self.memory_entry.grid(row=6, column=1, sticky=tk.W)
        self.memory_entry.insert(tk.END, '30')

        # Monitoring interval label and entry
        self.interval_label = tk.Label(self.border_frame, text="Monitoring Interval (seconds):")
        self.interval_label.grid(row=7, column=0, sticky=tk.W)
        self.interval_entry = tk.Entry(self.border_frame, width=10)
        self.interval_entry.grid(row=7, column=1, sticky=tk.W)
        self.interval_entry.insert(tk.END, '3')

        # Start monitoring button
        self.start_button = tk.Button(self.border_frame, text="Start Monitoring", command=self.start_monitoring)
        self.start_button.grid(row=8, column=0, columnspan=2, pady=10)

        # Stop monitoring button
        self.stop_button = tk.Button(self.border_frame, text="Stop Monitoring", command=self.stop_monitoring)
        self.stop_button.grid(row=8, column=2, pady=10)

        # Directory to monitor label and entry
        self.monitor_label = tk.Label(self.border_frame, text="Directory to Monitor:")
        self.monitor_label.grid(row=9, column=0, sticky=tk.W)
        self.monitor_entry = tk.Entry(self.border_frame, width=50)
        self.monitor_entry.grid(row=9, column=1)

        # Browse directory to monitor button
        self.browse_monitor_button = tk.Button(self.border_frame, text="Browse", command=self.browse_monitor)
        self.browse_monitor_button.grid(row=9, column=2)

        # Start directory monitoring button
        self.start_monitor_button = tk.Button(self.border_frame, text="Start Directory Monitoring", command=self.start_directory_monitoring)
        self.start_monitor_button.grid(row=10, column=0, columnspan=3, pady=10)

        # Stop directory monitoring button
        self.stop_monitor_button = tk.Button(self.border_frame, text="Stop Directory Monitoring", command=self.stop_directory_monitoring)
        self.stop_monitor_button.grid(row=11, column=0, columnspan=3, pady=10)

        # Create Virtual Environment button
        self.create_env_button = tk.Button(self.border_frame, text="Create Virtual Environment", command=self.create_virtual_env)
        self.create_env_button.grid(row=12, column=0, columnspan=3, pady=10)

        # Output text area
        global output_text
        output_text = scrolledtext.ScrolledText(self.border_frame, width=70, height=20)
        output_text.grid(row=13, column=0, columnspan=3, pady=10)

    def browse_source(self):
        source_directory = filedialog.askdirectory()
        if source_directory:
            self.source_entry.delete(0, tk.END)
            self.source_entry.insert(0, source_directory)

    def browse_destination(self):
        destination_directory = filedialog.askdirectory()
        if destination_directory:
            self.destination_entry.delete(0, tk.END)
            self.destination_entry.insert(0, destination_directory)

    def browse_exe(self):
        exe_file = filedialog.askopenfilename(filetypes=[("Executable files", "*.exe")])
        if exe_file:
            self.exe_entry.delete(0, tk.END)
            self.exe_entry.insert(0, exe_file)

    def transfer_files(self):
        source_directory = self.source_entry.get()
        destination_directory = self.destination_entry.get()
        transfer_files(source_directory, destination_directory)

    def start_monitoring(self):
        CPU_THRESHOLD = float(self.cpu_entry.get())
        MEMORY_THRESHOLD = float(self.memory_entry.get())
        INTERVAL = int(self.interval_entry.get())
        global running
        running = True
        monitor_thread = threading.Thread(target=monitor_resources, args=(CPU_THRESHOLD, MEMORY_THRESHOLD, INTERVAL))
        monitor_thread.start()

    def stop_monitoring(self):
        stop_monitoring()

    def browse_monitor(self):
        monitor_directory = filedialog.askdirectory()
        if monitor_directory:
            self.monitor_entry.delete(0, tk.END)
            self.monitor_entry.insert(0, monitor_directory)

    def start_directory_monitoring(self):
        directory = self.monitor_entry.get()
        directory_monitoring_thread = threading.Thread(target=monitor_directory, args=(directory,))
        directory_monitoring_thread.start()

    def stop_directory_monitoring(self):
        stop_directory_monitoring_event.set()

    def create_virtual_env(self):
        download_dir = create_virtual_env()
        output_text.insert(tk.END, f"Virtual environment created with 'downloads' folder at: {download_dir}\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = RansomwareToolApp(root)
    root.mainloop()
