import os
import shutil
import subprocess
import psutil
import logging
import time
import threading
import platform
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from tkinter import *
from tkinter import filedialog, messagebox, scrolledtext
from tkinter import ttk
from PIL import Image, ImageTk

# Ransomware signatures
ransomware_signatures = [
    b'\x57\x41\x4E\x41\x43\x52\x59',  # "WANACRY"
    b'\x43\x52\x59\x50\x54\x4F\x4C\x4F\x43\x4B\x45\x52',  # "CRYPTOLOCKER"
    b'\x54\x45\x53\x4C\x41\x43\x52\x59\x50\x54',  # "TESLACRYPT"
    b'\x4C\x4F\x43\x4B\x59',  # "LOCKY"
    b'\x43\x45\x52\x42\x45\x52',  # "CERBER"
    b'\x50\x45\x54\x59\x41',  # "PETYA"
    b'\x4E\x4F\x54\x50\x45\x54\x59\x41',  # "NOTPETYA"
    b'\x52\x59\x55\x4B',  # "RYUK"
    b'\x47\x41\x4E\x44\x43\x52\x41\x42',  # "GANDCRAB"
    b'\x4D\x41\x5A\x45',  # "MAZE"
    b'\x53\x4F\x44\x49\x4E\x4F\x4B\x49\x42\x49',  # "SODINOKIBI"
    b'\x45\x47\x52\x45\x47\x4F\x52',  # "EGREGOR"
    b'\x44\x48\x41\x52\x4D\x41',  # "DHARMA"
    b'\x41\x56\x41\x44\x44\x4F\x4E',  # "AVADDON"
    b'\x42\x4C\x41\x43\x4B\x4D\x41\x54\x54\x45\x52',  # "BLACKMATTER"
    b'\x43\x4F\x4E\x54\x49',  # "CONTI"
    b'\x43\x4C\x4F\x50',  # "CLOP"
    b'\x50\x48\x4F\x45\x4E\x49\x58',  # "PHOENIX"
    b'\x50\x59\x53\x41',  # "PYSA"
    b'\x4D\x4F\x55\x4E\x54\x4C\x4F\x43\x4B\x45\x52',  # "MOUNTLOCKER"
]

def scan_file_for_signatures(file_path, signatures):
    try:
        with open(file_path, 'rb') as file:
            file_content = file.read()
            for signature in signatures:
                if signature in file_content:z
                return True
        return False
    except Exception as e:
        output_text.insert(END, f"Error reading file {file_path}: {e}\n")
        return False

def scan_directory(directory, signatures):
    ransomware_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            if scan_file_for_signatures(file_path, signatures):
                ransomware_files.append(file_path)
    return ransomware_files

def move_file(source_file, destination_directory):
    filename = os.path.basename(source_file)
    shutil.move(source_file, os.path.join(destination_directory, filename))
    output_text.insert(END, f"\nFile '{filename}' moved to {destination_directory}\n")

def transfer_files(source_directory, destination_directory):
    ransomware_files = scan_directory(source_directory, ransomware_signatures)
    if ransomware_files:
        output_text.insert(END, "\nRansomware detected. The following files will not be moved:\n")
        for ransomware_file in ransomware_files:
            output_text.insert(END, f"{ransomware_file}\n")
    
    output_text.insert(END, "\nTransferred files ....\n")
    for filename in os.listdir(source_directory):
        source_file = os.path.join(source_directory, filename)
        if source_file not in ransomware_files:  # Only move files not detected as ransomware
            move_file(source_file, destination_directory)

# System resource monitoring
if platform.system() == 'Windows':
    from win10toast import ToastNotifier
    toaster = ToastNotifier()
else:
    import notify2
    notify2.init("Resource Monitor")

logging.basicConfig(filename='system_monitor.log', level=logging.DEBUG, format='%(asctime)s - %(message)s')

def check_system_resources(CPU_THRESHOLD, MEMORY_THRESHOLD):
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            logging.debug(f"Checking process {proc.info['name']} (PID: {proc.info['pid']})")
            if proc.info['cpu_percent'] > CPU_THRESHOLD or proc.info['memory_percent'] > MEMORY_THRESHOLD:
                alert_message = (f"High resource usage detected: "
                                 f"CPU: {proc.info['cpu_percent']}%, "
                                 f"Memory: {proc.info['memory_percent']}%")
                output_text.insert(END, f"{alert_message}\n")
                logging.info(alert_message)
                display_notification(alert_message)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

def monitor_resources(CPU_THRESHOLD, MEMORY_THRESHOLD, INTERVAL):
    global running
    output_text.insert(END, "Starting system resource monitoring...\n")
    while running:
        check_system_resources(CPU_THRESHOLD, MEMORY_THRESHOLD)
        time.sleep(INTERVAL)

def stop_monitoring():
    global running
    running = False

def display_notification(message):
    if platform.system() == 'Windows':
        toaster.show_toast("Resource Monitor", message, duration=5)
    else:
        notification = notify2.Notification("Resource Monitor", message)
        notification.show()

# Directory monitoring
class NewFileHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            output_text.insert(END, f"New file detected: {event.src_path}\n")
            process_new_file(event.src_path)

def scan_file(file_path):
    try:
        with open(file_path, 'r') as file:
            contents = file.read()
            if "ransomware_signature" in contents:
                return False
            else:
                return True
    except Exception as e:
        output_text.insert(END, f"Error scanning file: {e}\n")
        return False

def process_new_file(file_path):
    if scan_file(file_path):
        output_text.insert(END, f"File {file_path} is safe.\n")
        # Move the file to its intended location or take other action
    else:
        output_text.insert(END, f"File {file_path} is potentially dangerous!\n")
        # Alert the user and take appropriate action

def monitor_directory(path='.'):
    event_handler = NewFileHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=False)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# Running external scripts
def run_PE(app_instance):
    file_path = app_instance.exe_entry.get()
    if file_path:
        try:
            result = subprocess.run(
                ["python3", "/home/kali/Downloads/malware/Extract/PE_main.py", file_path],
                capture_output=True, text=True
            )
            output_text.insert(END, f"\nScan result for {file_path}:\n{result.stdout}\n{result.stderr}\n")
        except Exception as e:
            output_text.insert(END, f"Error running PE scan: {e}\n")
    else:
        messagebox.showwarning("Input Error", "Please enter the path to the .exe file.")


# GUI setup
class RansomwareToolApp:
    def __init__(self, master):
        self.master = master
        master.title("RAT")
        master.geometry("1000x800")  # Increased initial size of the window

        # Load and set application icon
        try:
            self.icon_image = Image.open("app.png")  # Use your PNG file here
            self.icon_photo = ImageTk.PhotoImage(self.icon_image)
            master.iconphoto(True, self.icon_photo)
        except Exception as e:
            print(f"Error loading icon: {e}")

        # Apply a theme
        self.style = ttk.Style()
        self.style.configure('TButton',
                             padding=6,
                             relief="flat",
                             background="gray",  # Set background color
                             foreground="black")  # Set text color
        self.style.map('TButton',
                       background=[('active', 'darkgray')],
                       foreground=[('active', 'black')])
        self.style.configure('TLabel', background="#F1F1F1")

        # Title
        self.title_frame = ttk.Frame(master)
        self.title_frame.grid(row=0, column=0, columnspan=2, pady=10, sticky="W")

        self.label = ttk.Label(self.title_frame, text="Ransomware Assessment Tool", font=("Helvetica", 16))
        self.label.pack()

        # File transfer section
        self.file_transfer_frame = ttk.LabelFrame(master, text="File Transfer", padding=(10, 5))
        self.file_transfer_frame.grid(row=1, column=0, padx=10, pady=10, sticky="EW")
        self.file_transfer_frame.columnconfigure(1, weight=1)

        self.source_label = ttk.Label(self.file_transfer_frame, text="Source Directory:")
        self.source_label.grid(row=0, column=0, padx=5, pady=5, sticky="W")
        self.source_entry = ttk.Entry(self.file_transfer_frame)
        self.source_entry.grid(row=0, column=1, padx=5, pady=5, sticky="EW")
        self.source_button = ttk.Button(self.file_transfer_frame, text="Browse", command=self.browse_source_directory)
        self.source_button.grid(row=0, column=2, padx=5, pady=5)

        self.destination_label = ttk.Label(self.file_transfer_frame, text="Destination Directory:")
        self.destination_label.grid(row=1, column=0, padx=5, pady=5, sticky="W")
        self.destination_entry = ttk.Entry(self.file_transfer_frame)
        self.destination_entry.grid(row=1, column=1, padx=5, pady=5, sticky="EW")
        self.destination_button = ttk.Button(self.file_transfer_frame, text="Browse", command=self.browse_destination_directory)
        self.destination_button.grid(row=1, column=2, padx=5, pady=5)

        self.transfer_button = ttk.Button(self.file_transfer_frame, text="Transfer Files", command=self.scan_folder)
        self.transfer_button.grid(row=2, column=0, columnspan=3, pady=5)

        # System resource monitoring section
        self.monitoring_frame = ttk.LabelFrame(master, text="System Resource Monitoring", padding=(10, 5))
        self.monitoring_frame.grid(row=2, column=0, padx=10, pady=10, sticky="EW")
        self.monitoring_frame.columnconfigure(1, weight=1)

        self.cpu_label = ttk.Label(self.monitoring_frame, text="CPU Threshold (%):")
        self.cpu_label.grid(row=0, column=0, padx=5, pady=5, sticky="W")
        self.cpu_entry = ttk.Entry(self.monitoring_frame)
        self.cpu_entry.insert(0, "30")  # Default value
        self.cpu_entry.grid(row=0, column=1, padx=5, pady=5, sticky="EW")

        self.memory_label = ttk.Label(self.monitoring_frame, text="Memory Threshold (%):")
        self.memory_label.grid(row=1, column=0, padx=5, pady=5, sticky="W")
        self.memory_entry = ttk.Entry(self.monitoring_frame)
        self.memory_entry.insert(0, "30")  # Default value
        self.memory_entry.grid(row=1, column=1, padx=5, pady=5, sticky="EW")

        self.interval_label = ttk.Label(self.monitoring_frame, text="Monitoring Interval (s):")
        self.interval_label.grid(row=2, column=0, padx=5, pady=5, sticky="W")
        self.interval_entry = ttk.Entry(self.monitoring_frame)
        self.interval_entry.insert(0, "5")  # Default value
        self.interval_entry.grid(row=2, column=1, padx=5, pady=5, sticky="EW")

        self.start_monitoring_button = ttk.Button(self.monitoring_frame, text="Start Monitoring", command=self.start_monitoring)
        self.start_monitoring_button.grid(row=3, column=0, padx=5, pady=5)

        self.stop_monitoring_button = ttk.Button(self.monitoring_frame, text="Stop Monitoring", command=self.stop_monitoring, state=DISABLED)
        self.stop_monitoring_button.grid(row=3, column=1, padx=5, pady=5)

        # Directory monitoring section
        self.directory_monitoring_frame = ttk.LabelFrame(master, text="Directory Monitoring", padding=(10, 5))
        self.directory_monitoring_frame.grid(row=3, column=0, padx=10, pady=10, sticky="EW")

        self.monitor_directory_button = ttk.Button(self.directory_monitoring_frame, text="Monitor Directory", command=self.monitor_directory)
        self.monitor_directory_button.grid(row=0, column=0, padx=5, pady=5)

        # PE scan section
        self.pe_scan_frame = ttk.LabelFrame(master, text="exe Scan", padding=(10, 5))
        self.pe_scan_frame.grid(row=4, column=0, padx=10, pady=10, sticky="EW")
        self.pe_scan_frame.columnconfigure(1, weight=1)

        self.exe_label = ttk.Label(self.pe_scan_frame, text="File Path '*.exe':")
        self.exe_label.grid(row=0, column=0, padx=5, pady=5, sticky="W")
        self.exe_entry = ttk.Entry(self.pe_scan_frame)
        self.exe_entry.grid(row=0, column=1, padx=5, pady=5, sticky="EW")
        self.exe_button = ttk.Button(self.pe_scan_frame, text="Browse", command=self.browse_exe_file)
        self.exe_button.grid(row=0, column=2, padx=5, pady=5)

        self.pe_scan_button = ttk.Button(self.pe_scan_frame, text="Scan", command=lambda: run_PE(self))
        self.pe_scan_button.grid(row=1, column=0, columnspan=3, pady=5)

        # Button to update the monitoring parameters
        self.update_button = ttk.Button(master, text="Advanced Monitoring Settings", command=self.toggle_advanced_settings)
        self.update_button.grid(row=5, column=0, padx=10, pady=5, sticky="W")

        # User input fields (initially hidden)
        self.advanced_settings_frame = ttk.Frame(master)
        self.advanced_settings_frame.grid(row=6, column=0, padx=10, pady=5, sticky="W")

        self.cpu_label = ttk.Label(self.advanced_settings_frame, text="CPU Threshold (%):")
        self.cpu_label.grid(row=0, column=0, padx=5, pady=5, sticky="W")
        self.cpu_entry = ttk.Entry(self.advanced_settings_frame)
        self.cpu_entry.insert(0, "30")  # Default value
        self.cpu_entry.grid(row=0, column=1, padx=5, pady=5, sticky="W")

        self.memory_label = ttk.Label(self.advanced_settings_frame, text="Memory Threshold (%):")
        self.memory_label.grid(row=1, column=0, padx=0, pady=5, sticky="W")
        self.memory_entry = ttk.Entry(self.advanced_settings_frame)
        self.memory_entry.insert(0, "30")  # Default value
        self.memory_entry.grid(row=1, column=1, padx=5, pady=5, sticky="W")

        self.interval_label = ttk.Label(self.advanced_settings_frame, text="Monitoring Interval (s):")
        self.interval_label.grid(row=2, column=0, padx=5, pady=5, sticky="W")
        self.interval_entry = ttk.Entry(self.advanced_settings_frame)
        self.interval_entry.insert(0, "5")  # Default value
        self.interval_entry.grid(row=2, column=1, padx=5, pady=5, sticky="W")

        self.apply_settings_button = ttk.Button(self.advanced_settings_frame, text="Apply Settings", command=self.update_settings)
        self.apply_settings_button.grid(row=3, column=0, columnspan=2, pady=5)

        self.advanced_settings_frame.grid_forget()  # Hide advanced settings initially

        # Output text box
        global output_text
        output_text = scrolledtext.ScrolledText(master, wrap=WORD, width=80, height=30)
        output_text.grid(row=1, column=1, rowspan=14, padx=10, pady=10, sticky="NSEW")

        # Configure grid row weights
        master.grid_rowconfigure(14, weight=1)
        master.grid_columnconfigure(1, weight=1)

    def browse_source_directory(self):
        folder_path = filedialog.askdirectory()
        if folder_path:
            self.source_entry.delete(0, END)
            self.source_entry.insert(0, folder_path)

    def browse_destination_directory(self):
        folder_path = filedialog.askdirectory()
        if folder_path:
            self.destination_entry.delete(0, END)
            self.destination_entry.insert(0, folder_path)

    def browse_exe_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Executable Files", "*.exe")])
        if file_path:
            self.exe_entry.delete(0, END)
            self.exe_entry.insert(0, file_path)

    def scan_folder(self):
        folder_path = self.source_entry.get()
        if folder_path:
            destination_directory = self.destination_entry.get()
            if destination_directory:
                threading.Thread(target=transfer_files, args=(folder_path, destination_directory)).start()

    def start_monitoring(self):
        global running
        CPU_THRESHOLD = int(self.cpu_entry.get())
        MEMORY_THRESHOLD = int(self.memory_entry.get())
        INTERVAL = int(self.interval_entry.get())
        self.start_monitoring_button.config(state=DISABLED)
        self.stop_monitoring_button.config(state=NORMAL)
        running = True
        self.monitor_thread = threading.Thread(target=monitor_resources, args=(CPU_THRESHOLD, MEMORY_THRESHOLD, INTERVAL))
        self.monitor_thread.start()

    def stop_monitoring(self):
        stop_monitoring()
        self.start_monitoring_button.config(state=NORMAL)
        self.stop_monitoring_button.config(state=DISABLED)
        self.monitor_thread.join()

    def monitor_directory(self):
        directory_path = filedialog.askdirectory()
        if directory_path:
            threading.Thread(target=monitor_directory, args=(directory_path,)).start()

    def toggle_advanced_settings(self):
        if self.advanced_settings_frame.winfo_ismapped():
            self.advanced_settings_frame.grid_forget()
        else:
            self.advanced_settings_frame.grid(row=6, column=0, padx=10, pady=5, sticky="W")

    def update_settings(self):
        global CPU_THRESHOLD, MEMORY_THRESHOLD, INTERVAL
        try:
            CPU_THRESHOLD = int(self.cpu_entry.get())
            MEMORY_THRESHOLD = int(self.memory_entry.get())
            INTERVAL = int(self.interval_entry.get())
            output_text.insert(END, f"Settings updated: CPU Threshold: {CPU_THRESHOLD}%, Memory Threshold: {MEMORY_THRESHOLD}%, Interval: {INTERVAL}s\n")
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid numbers.")

if __name__ == "__main__":
    root = Tk()
    app = RansomwareToolApp(root)
    root.mainloop()
