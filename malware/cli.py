import os
import shutil
import subprocess
import psutil
import logging
import time
import threading
import platform
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
print(" ____      _  _____")
print("|  _ \    / \|_   _|")
print("| |_) |  / _ \ | |  ")
print("|  _ <  / ___ \| |  ")
print("|_| \_\/_/   \_\_| -(Ransomware Assessment Tool)")

# Ransomware scanning
ransomware_signatures = [
    b'\x57\x41\x4E\x41\x43\x52\x59',  # "WANACRY"
    b'\x43\x52\x59\x50\x54\x4F\x4C\x4F\x43\x4B\x45\x52',  # "CRYPTOLOCKER"
    b'\x54\x45\x53\x4C\x41\x43\x52\x59\x50\x54',  # "TESLACRYPT"
    b'\x4C\x4F\x43\x4B\x59',  # "LOCKY"
    b'\x43\x45\x52\x42\x45\x52',  # "CERBER"
    b'\x50\x45\x54\x59\x41',  # "PETYA"
    b'\x4E\x4F\x54\x50\x45\x54\x59\x41',  # "NOTPETYA"
    b'\x52\x59\x55\x4B',  # "RYUK"
    b'\x47\x41\x4E\x44\x43\x52\x41\x42',  # "GANDCRAB"
    b'\x4D\x41\x5A\x45',  # "MAZE"
    b'\x53\x4F\x44\x49\x4E\x4F\x4B\x49\x42\x49',  # "SODINOKIBI"
    b'\x45\x47\x52\x45\x47\x4F\x52',  # "EGREGOR"
    b'\x44\x48\x41\x52\x4D\x41',  # "DHARMA"
    b'\x41\x56\x41\x44\x44\x4F\x4E',  # "AVADDON"
    b'\x42\x4C\x41\x43\x4B\x4D\x41\x54\x54\x45\x52',  # "BLACKMATTER"
    b'\x43\x4F\x4E\x54\x49',  # "CONTI"
    b'\x43\x4C\x4F\x50',  # "CLOP"
    b'\x50\x48\x4F\x45\x4E\x49\x58',  # "PHOENIX"
    b'\x50\x59\x53\x41',  # "PYSA"
    b'\x4D\x4F\x55\x4E\x54\x4C\x4F\x43\x4B\x45\x52',  # "MOUNTLOCKER"
]

def scan_file_for_signatures(file_path, signatures):
    try:
        with open(file_path, 'rb') as file:
            file_content = file.read()
            for signature in signatures:
                if signature in file_content:
                    return True
        return False
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        return False

def scan_directory(directory, signatures):
    ransomware_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            if scan_file_for_signatures(file_path, signatures):
                ransomware_files.append(file_path)
    return ransomware_files

def move_file(source_file, destination_directory):
    filename = os.path.basename(source_file)
    shutil.move(source_file, os.path.join(destination_directory, filename))
    print(f"\nFile '{filename}' moved to {destination_directory}")

def transfer_files(source_directory, destination_directory):
    ransomware_files = scan_directory(source_directory, ransomware_signatures)
    if ransomware_files:
        print("\nRansomware detected. The following files will not be moved:")
        for ransomware_file in ransomware_files:
            print(ransomware_file)
    
    print("\nTransferred files ....")
    for filename in os.listdir(source_directory):
        source_file = os.path.join(source_directory, filename)
        if source_file not in ransomware_files:  # Only move files not detected as ransomware
            move_file(source_file, destination_directory)

# System resource monitoring
if platform.system() == 'Windows':
    from win10toast import ToastNotifier
    toaster = ToastNotifier()
else:
    import notify2
    notify2.init("Resource Monitor")

logging.basicConfig(filename='system_monitor.log', level=logging.DEBUG, format='%(asctime)s - %(message)s')
CPU_THRESHOLD = 20.0  # percent
MEMORY_THRESHOLD = 20.0  # percent
INTERVAL = 5  # seconds
running = True

def check_system_resources():
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            logging.debug(f"Checking process {proc.info['name']} (PID: {proc.info['pid']})")
            if proc.info['cpu_percent'] > CPU_THRESHOLD or proc.info['memory_percent'] > MEMORY_THRESHOLD:
                alert_message = (f"High resource usage detected: "
                                 f"CPU: {proc.info['cpu_percent']}%, "
                                 f"Memory: {proc.info['memory_percent']}%")
                print(alert_message)
                logging.info(alert_message)
                display_notification(alert_message)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

def monitor_resources():
    global running
    print("Starting system resource monitoring...")
    while running:
        check_system_resources()
        time.sleep(INTERVAL)

def stop_monitoring():
    global running
    input("Press Enter to stop monitoring...\n")
    running = False

def display_notification(message):
    if platform.system() == 'Windows':
        toaster.show_toast("Resource Monitor", message, duration=5)
    else:
        notification = notify2.Notification("Resource Monitor", message)
        notification.show()

# Directory monitoring
class NewFileHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            print(f"New file detected: {event.src_path}")
            process_new_file(event.src_path)

def scan_file(file_path):
    try:
        with open(file_path, 'r') as file:
            contents = file.read()
            if "ransomware_signature" in contents:
                return False
            else:
                return True
    except Exception as e:
        print(f"Error scanning file: {e}")
        return False

def process_new_file(file_path):
    if scan_file(file_path):
        print(f"File {file_path} is safe.")
        # Move the file to its intended location or take other action
    else:
        print(f"File {file_path} is potentially dangerous!")
        # Alert the user and take appropriate action

def monitor_directory(path='.'):
    event_handler = NewFileHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=False)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# Running external scripts
def run_PE():
    file = input("Enter the path and name of the file: ")
    os.system(f"python3 /home/kali/Downloads/RAM/malware/Extract/PE_main.py {file}")

def run_URL():
    os.system('python3 /home/kali/Downloads/malware/Extract/url_main.py')

# Main function
def main():
    while True:
        print("\nEnter 1 to scan the folder")
        print("Enter 2 to monitor system resources")
        print("Enter 3 to monitor a directory")
        print("Enter 4 to scan .exe file with a file path")
        print("Enter 5 to scan url")
        choice = input("Enter your choice (1, 2, 3, 4 or 5): ").strip()
        if choice == "1":
            source_directory = '/home/kali/venv/Downloads'  # Specify your source directory
            destination_directory = '/home/kali/Downloads'  # Specify your destination directory
            transfer_files(source_directory, destination_directory)
        elif choice == "2":
            monitor_thread = threading.Thread(target=monitor_resources)
            stop_thread = threading.Thread(target=stop_monitoring)
            monitor_thread.start()
            stop_thread.start()
            monitor_thread.join()
            stop_thread.join()
            print("System resource monitoring stopped.")
        elif choice == "3":
            directory_to_watch = "/home/kali/Downloads"
            monitor_directory(directory_to_watch)
        elif choice == "4":
            run_PE()
        elif choice == "5":
            run_URL()
        else:
            print("Invalid choice. Please enter '1', '2', '3', '4' or '5'.")

        choice = input("Do you want to perform another action? (Y/N): ").strip().lower()
        if choice not in ['y', 'yes']:
            print("\nExiting the program.")
            break

if __name__ == "__main__":
    main()
